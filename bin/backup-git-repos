#!/usr/bin/env bash
# Purpose: Recursively visit each git clone and "clean" the build local
# artifacts plus GC and prune the Git repositories.

function usage() {
  echo "Usage: $0 [OPTIONS] [ROOTDIR]"
  echo "where ROOTDIR is optional and defaults to PWD (${PWD})."
  echo "  and OPTIONS include --skip-artifact-clean."
}

function sp_find_git_repos() {
  if [ "$#" -ne 1 ]; then
    >&2 echo "Error: Expected one argument to ${FUNCNAME}: DIR"
    return 1
  fi

  local -r dir="${1}"
  find "${dir}" -name ".git" -type d | sed 's/\/\.git$//g'
}

function sp_clean_artifacts() {
  if [ "$#" -ne 1 ]; then
    >&2 echo "Error: Expected one argument for ${FUNCNAME}: CLONEDIR"
    return 1
  fi

  local -r clone_dir="${1}"

  pushd "${clone_dir}"
  # first let's check if Makefile exists
  [ -f Makefile ] && (make clean || true)
  # now check if a *.cabal file exists
  [ -f "*.cabal" ] && (cabal clean || true)
  # now check if a cabal sandbox exists
  [ -d ".cabal-sandbox" ] && (cabal sandbox delete || true)
  # now clean up any scala projects using SBT
  [ -f build.sbt -o -f "project/*.scala" -o -f "project/*.sbt" ] && sbt clean || true
  # now clean up any maven projects
  [ -f pom.xml ] && (mvn clean || true)
  # what about Ruby rake projects?
  [ -f Rakefile -a -f Gemfile ] && (bundle exec rake clean || true)
  [ -f Rakefile -a ! -f Gemfile ] && (rake clean || true)
  # and clean up local ruby bundles
  [ -f Gemfile -a -d .bundle ] && (rm -rf .bundle || true)

  # Allow errors on remote communication to occur since they are probably
  # just stale remotes. It does not require to stop all processing of this
  # script.
  git remote | xargs git remote prune || true

  # now we will GC the git repo and aggressively prune
  git prune
  git gc --aggressive
  popd
}

function sp_compress_repos() {
  if [ "$#" -eq 0 ]; then
    echo "Error: Expects at least one argument to ${FUNCNAME}: *DIRS"
    return 1
  fi

  # depends on global helper function from my ~/.profile.d/global.functions
  sp_global_create_tarbz2_backup "Code" "${TMPDIR:-/tmp}" $*
}

if [ "${BASH_SOURCE[0]}" != "$0" ]; then
  >&2 echo "Error: Sourcing executable script ${0}."
else
  if [ "$#" -gt 0 ]; then
    for arg in "${@}"; do
      case "${arg}" in
        -h|--help) usage; exit 0;;
        --skip-artifact-clean) declare -ri sp_skip_clean=1; shift;;
        *) ;;
      esac
    done
    declare -r sp_root_dir="${1}"
    [ -z "${sp_skip_clean}" ] && declare -r sp_skip_clean=0
  else
    declare -r sp_root_dir="${PWD}"
    declare -ri sp_skip_clean=0
  fi
  echo "Using sp_root_dir=${sp_root_dir}"

  set -eu
  declare -a sp_git_repos=($(sp_find_git_repos "${sp_root_dir}"))
  echo "${sp_git_repos[@]}"
  if [ ! -z "${sp_git_repos[*]}" ]; then
    if [ "${sp_skip_clean}" -eq 0 ]; then
      for gr in "${sp_git_repos[@]}"; do
        echo "Cleaning up ${gr}..."
        sp_clean_artifacts "${gr}"
      done
    fi
    sp_compress_repos ${sp_git_repos[*]}
    exit 0
  else
    >&2 echo "Error: no git repositories found."
    exit 1
  fi
fi
