
function gerrit() {
  ssh -p "${GERRIT_PORT}" "${GERRIT_HOST}" gerrit $*
}

function gerrit-download-patch() {
  if [ "$#" -ne 1 ]; then
    >&2 echo "ERROR: Expected one argument for ${FUNCNAME}, received $#."
    return 1
  fi

  local -r refspec="$(git lspatchsets  | grep "${1}" | sort -k2 -V | tail -1 | cut -f2)"
  local -r stat="$(git status --short)"

  if [ -z "${stat}" ]; then
    git fetch gerrit "${refspec}"
    git checkout -b "${refspec}" FETCH_HEAD
  else
    >&2 echo "ERROR: Local changes:"
    echo "${stat}"
    return 1
   fi
}

function gerrit-backup-push-ticket() {
  local -r current_branch="$(git rev-parse --abbrev-ref HEAD)"

  if [ "$#" -gt 2 -o "${current_branch}" == "master" ]; then
    >&2 echo "ERROR: Expected 0, 1, or 2 arguments for ${FUNCNAME}, received $#."
    >&2 echo "USAGE: ${FUNCNAME} [BRANCH] [TICKETID]"
    >&2 echo "NOTE: Must not be on master branch locally."
    return 1
  fi

  local -r base="$(basename --suffix=.git "${PWD}")"
  local -r remote="backup"
  local -r gerrit_backup_host="${GERRIT_BACKUP_HOST:-gerritbackup}"
  local -r base_branch="${1:-master}"
  local -r ticket="${2:-"${current_branch}"}"
  local -r refspec="${ticket}:refs/publish/${base_branch}/${ticket}"

  if git ls-remote --heads --exit-code "${remote}" "refs/heads/${ticket}"; then
    echo "Backing up branch (${current_branch}) on ${remote}."
    git push --quiet "${remote}" "${ticket}" --force-with-lease="${current_branch}"
  else
    echo "Creating backup branch ${current_branch} to ${remote}."
    git push --quiet "${remote}" "${ticket}"
  fi
  ssh -A "${gerrit_backup_host}" -- \
    git -C "~/repos/services/${base}.git" push --quiet gerrit "${refspec}"
}

