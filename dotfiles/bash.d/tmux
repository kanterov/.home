#!/usr/bin/env bash

declare -r default_session_name="work"
declare -r sh_cmd="exec bash"
declare -r work_dir="${WORK_HOME:-"${HOME}/src/work"}"

# This should only ever return either "0" or "1"
function tmux_session_matches() {
  local name=$1
  tmux ls | grep -c "^${name}$"
}

function setup_window() {
  if [ "$#" -ne 3 ]; then
    >&2 echo "ERROR: Expected 2 arguments, received $# for ${FUNCNAME}."
    >&2 echo "USAGE: ${FUNCNAME} INDEX NAME DIR"
    return 1
  fi

  local -r idx="${1}"
  local -r name="${2}"
  local -r dir="${3}"
  local -r cmd="cd ${dir}; ${sh_cmd}"

  tmux set-window-option -t "${default_session_name}" -g automatic-rename off;
  tmux new-window        -t "${default_session_name}:${idx}" -k -n "${name}" "${cmd}";
  tmux split-window -h   -t "${default_session_name}:${idx}" "${cmd}";
}

function setup_single_pane_window() {
  if [ "$#" -ne 3 ]; then
    >&2 echo "ERROR: Expected 2 arguments, received $# for ${FUNCNAME}."
    >&2 echo "USAGE: ${FUNCNAME} INDEX NAME DIR"
    return 1
  fi

  local -r idx="${1}"
  local -r name="${2}"
  local -r dir="${3}"
  local -r cmd="cd ${dir}; ${sh_cmd}"

  tmux set-window-option -t "${default_session_name}" -g automatic-rename on;
  tmux new-window        -t "${default_session_name}:${idx}" -k -n "${name}" "${cmd}";
}

function setup_nix_window() {
  if [ "$#" -ne 3 ]; then
    >&2 echo "ERROR: Expected 2 arguments, received $# for ${FUNCNAME}."
    >&2 echo "USAGE: ${FUNCNAME} INDEX NAME DIR"
    return 1
  fi

  local -r idx="${1}"
  local -r name="${2}"
  local -r dir="${3}"
  local -r cmd="cd ${dir}; ${sh_cmd}"
  local -r dname="${name}-${Z_ENV:-dev-${USER}}-${Z_DEPLOYMENT_TARGET_ENV:-"virtualbox/singlenode"//\//-}"

  tmux set-window-option -t "${default_session_name}" -g automatic-rename off
  tmux new-window        -t "${default_session_name}:${idx}" -k -n "${name}" "${cmd}"
  tmux split-window -h   -t "${default_session_name}:${idx}" "${cmd}"
  tmux split-window -v   -t "${default_session_name}:${idx}" "${cmd}; nix-repl"
}

function configure_windows() {
  local -r root_dir="${work_dir}/root"
  local -r services_dir="${root_dir}/services"
  local -ra services=("${SERVICE_NAMES[@]}")
  local -ra docs=("$(ls "${root_dir}/docs")")

  setup_window 0 "root" "${work_dir}/root"

  local -i tab_idx=1
  for s in "${services[@]}"; do
    setup_window "${tab_idx}" "${s}" "${services_dir}/${s}"
    tab_idx=$((tab_idx+1))
  done

  setup_window "${tab_idx}" "nix" "${HOME}/src/nixos"
  tab_idx=$((tab_idx+1))
  setup_window "${tab_idx}" "oss" "${HOME}/src/oss"
  tab_idx=$((tab_idx+1))
  setup_single_pane_window "${tab_idx}" "chat" "${HOME}"
  tab_idx=$((tab_idx+1))
  setup_window "${tab_idx}" "vpn" "${HOME}"
  tab_idx=$((tab_idx+1))
}

tmux start-server
if [ -z "${TMUX}" ] && [ -z "${IN_NIX_SHELL}" ]; then
  if [ "$(tmux_session_matches "${default_session_name}")" -eq 0 ]; then
    echo "Launching tmux base session ${default_session_name}..."
    tmux new-session -d -s ${default_session_name}
    configure_windows
    tmux attach -t ${default_session_name}
  else
    echo "Launching synced copy of base session ${default_session_name}..."
    sid="${default_session_name}-$(date +%Y%m%d%H%M%S)"
    tmux new-session -d -t "${sid}" -s "${default_session_name}"
    configure_windows
    tmux attach -t "${sid}"
  fi
fi
